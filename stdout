
> @ lint /sandbox
> eslint --config ${CYBER_DOJO_SANDBOX}/.eslintrc.json /**/*.js


> @ test /sandbox
> jest --coverage

  console.log
    [
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }',
      'number => {\n' +
        '      /* istanbul ignore next */\n' +
        '      cov_1vsvadvvax().f[8]++;\n' +
        '      cov_1vsvadvvax().s[11]++;\n' +
        '      return number % modulo === 0 ?\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][0]++, string) :\n' +
        '      /* istanbul ignore next */\n' +
        '      (cov_1vsvadvvax().b[0][1]++, number);\n' +
        '    }'
    ]

      at getFizzBuzzList (hiker.js:45:11)

----------|---------|----------|---------|---------|-------------------
File      | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------|---------|----------|---------|---------|-------------------
All files |   86.67 |        0 |   77.78 |   92.31 |                   
 hiker.js |   86.67 |        0 |   77.78 |   92.31 | 4                 
----------|---------|----------|---------|---------|-------------------
